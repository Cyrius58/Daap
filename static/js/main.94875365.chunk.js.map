{"version":3,"sources":["getWeb3.js","Addresse.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","on","location","reload","console","log","provider","providers","HttpProvider","Addresse","props","this","addr","React","Component","App","state","addresses","events","nbVoters","MaxVoters","nbProposals","MaxProposals","oneProposal","winner","workflowStatus","owned","accounts","contract","enumWorkflowStatus","tempAddr","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","methods","getNbProposals","call","getNbVoters","owner","getWorkflowStatus","options","fromBlock","toBlock","getPastEvents","listEvents","listAddress","setState","map","addresse","returnValues","getTotalVotes","totalVotes","getWinner","i","length","push","voterAddress","alert","error","runDefineMaxVoters","document","getElementById","value","defineMaxVoters","send","from","event","runAddVoter","utils","isAddress","isListed","Boolean","addVoter","getEvent","runDefineMaxProposals","defineMaxProposals","runAddProposal","proposition","addProposal","runNextStep","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotesDraw","getVoter","id","voter","getOneProposals","getOneProposal","for","type","placeholder","onClick","required","minLength","nbVotes","parseInt","className","adminTextMessage","commonStatus","adminAddingVotants","adminDefineMaxVoters","adminNextStepSection","adminDefineMaxProposals","commonVoterList","commonMessageAboutWorkFlow","commonLodingWeb3","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94875365.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          \n          window.ethereum.on('accountsChanged',function(){\n            window.location.reload();\n          });\n          window.ethereum.on('chainChanged',function(){\n            window.location.reload();\n          });\n          \n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react';\n\nexport default class Addresse extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n\n    render(){\n        return(\n            <div>{this.props.addr}</div>\n        )\n    }\n\n}","import React, { Component, useState, useEffect } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Addresse from \"./Addresse.js\";\n\nimport \"./App.css\";\n\n\nclass App extends Component {\n\n  state               = { addresses:null, events:null, nbVoters:null, MaxVoters:null, nbProposals:null, MaxProposals:null, oneProposal:null, /*totalVotes:null,*/ /*voter:0,*/ winner:0, workflowStatus:null, owned:null, web3:null, accounts:null, contract:null };\n  enumWorkflowStatus  = [\"Enregistrement des votants\",\"Enregistrement des propositions\",\"Fin de l'enregistrement des propositions\",\"Session de vote\",\"Fin de session de vote\",\"Session de résultats\"];\n  tempAddr            =[];\n  componentDidMount   = async () => {\n    try {\n      const web3            = await getWeb3();\n      const accounts        = await web3.eth.getAccounts();\n      const networkId       = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance        = new web3.eth.Contract(VotingContract.abi,deployedNetwork && deployedNetwork.address);\n\n      let nbProposals       = await instance.methods.getNbProposals().call();\n      let nbVoters          = await instance.methods.getNbVoters().call();\n      const owner           = await instance.methods.owner().call();\n      let workflowStatus    = await instance.methods.getWorkflowStatus().call();\n      let owned             =accounts[0]==owner;\n\n      let options   = {\n        fromBlock:  0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n        toBlock:    'latest'\n      };\n      const listEvents  = await instance.getPastEvents('MaxVoters',options);\n      const listAddress = await instance.getPastEvents('VoterRegistered',options);\n      this.setState({addresses:listAddress, events:listEvents, nbProposals, nbVoters,workflowStatus, web3, accounts, owned, contract: instance });\n\n      /**\n       * Récupération de deux emit directement depuis le smart contract pour réutilisation en front :\n       */\n\n      this.setState({MaxVoters:this.state.events.map((addresse)=>(addresse.returnValues.MaxVoters))});\n      this.setState({MaxProposals:this.state.events.map((addresse)=>(addresse.returnValues.MaxProposals))});\n\n      /**\n       * Récupération du nombre de vote et du gagnant avec condition de positionnement dans le workflow\n       */\n\n      if (this.state.workflowStatus>=4){\n        this.setState({totalVotes : await instance.methods.getTotalVotes().call()});\n      }\n      if (this.state.workflowStatus==5){\n        this.setState({winner:      await instance.methods.getWinner().call()});\n      }\n\n      /**\n       * Afin de réutiliser efficacement les addresses, un tableau dynamique est utilisé.\n       */\n\n      //console.log(listAddress[0].returnValues.voterAddress);\n      for (let i=0;i<listAddress.length;i++){\n        this.tempAddr.push(listAddress[0].returnValues.voterAddress);\n      }\n    } catch (error) {\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`,);\n      console.error(error);\n    }\n  };\n\n  runDefineMaxVoters = async ()=>{\n    const {accounts, contract}  =this.state;\n    const MaxVoters             =document.getElementById(\"MaxVoters\").value;\n\n    if(MaxVoters<2||MaxVoters>100||MaxVoters==null){\n      alert(`Please enter a value beetween 2 and 100.`);\n\n    }else{\n      await contract.methods.defineMaxVoters(MaxVoters).send({from:accounts[0]});\n\n      const listEvents=await contract.getPastEvents('MaxVoters');\n      this.setState({event:listEvents});\n    }\n  };\n\n  runAddVoter = async ()=>{\n      const {accounts, contract}=this.state;\n      let address=document.getElementById(\"adressevotant\").value;\n      if(this.state.web3.utils.isAddress(address)){\n        if(this.state.nbVoters<this.state.MaxVoters){\n          let isListed = new Boolean(false);\n          for (let i=0;i<=this.tempAddr.length;i++){\n            //console.log(this.tempAddr[i]);\n            if(address==this.tempAddr[i]){\n              isListed=true;\n            }\n          if (isListed==true){\n            alert(`Impossible : Adresse déjà inscrite !`);\n          }else{\n            await contract.methods.addVoter(address).send({from:accounts[0]});\n\n            let options   = {\n              fromBlock:  0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n              toBlock:    'latest'\n            };\n            const getEvent=await contract.getPastEvents('VoterRegistered',options);\n            this.setState({event:getEvent});\n            }\n          }\n        }else{\n          alert(`Nombre maximum de votant atteint !`);\n        }\n      }else{\n        alert(`Merci de renseigner une adresse valide`);\n      }\n\n  };\n\n  runDefineMaxProposals = async ()=>{\n    const {accounts, contract}=this.state;\n    const MaxProposals=document.getElementById(\"MaxProposals\").value;\n\n    if(MaxProposals<2||MaxProposals>100||MaxProposals ==null){\n      alert(`Please enter a value beetween 2 and 100.`);\n    }else{\n      await contract.methods.defineMaxProposals(MaxProposals).send({from:accounts[0]});\n\n      const listEvents=await contract.getPastEvents('MaxProposals');\n      this.setState({event:listEvents, MaxProposals});\n    }\n  };\n\n  runAddProposal = async ()=>{\n\n    const {accounts, contract}=this.state;\n    let proposition=document.getElementById(\"proposition\").value;\n    await contract.methods.addProposal(proposition).send({from:accounts[0]});\n\n    let options   = {\n      fromBlock:  0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n      toBlock:    'latest'\n    };\n\n    const getEvent = await contract.getPastEvents('ProposalRegistered',options);\n    this.setState({event:getEvent});\n};\n\n  /**\n   * this section is about all functions used to interact with the SC\n   */\n  runNextStep = async ()=>{\n    const {accounts, contract}=this.state;\n    if (this.state.workflowStatus==0){\n      await contract.methods.startProposalsRegistering().send({from:accounts[0]});\n    }\n    else if (this.state.workflowStatus==1){\n      await contract.methods.endProposalsRegistering().send({from:accounts[0]});\n    }\n    else if (this.state.workflowStatus==2){\n      await contract.methods.startVotingSession().send({from:accounts[0]});\n    }\n    else if (this.state.workflowStatus==3){\n      await contract.methods.endVotingSession().send({from:accounts[0]});\n    }\n    else if (this.state.workflowStatus==4){\n      await contract.methods.tallyVotesDraw().send({from:accounts[0]});\n    }\n    let workflowStatus = await contract.methods.getWorkflowStatus().call();\n    this.setState({workflowStatus});\n  }\n\n  /**\n   * Getters particuliers avec paramètres\n   */\n\n   getVoter = async (id) =>{\n    const {accounts, contract}=this.state;\n    if (id<=this.state.nbVoters&&id>=0){\n      this.setState({voter:await contract.methods.getVoter(id).call({from:accounts[0]})});\n      return(\n        <div>{this.state.voter}</div>\n      );\n    }else{\n      return(\n        <div>L'id renseigné ne retourne aucun enregistrement, veuillez vérifier votre saisie.</div>\n      );\n    }\n  }\n\n  getOneProposals = async (id) =>{\n    const {accounts, contract}=this.state;\n    if (id<=this.state.nbProposals&&id>=0){\n      this.setState({oneProposal:await contract.methods.getOneProposal(1).call({from:accounts[0]})});\n      return(\n        <div>{this.state.oneProposal}</div>\n      );\n    }else{\n      return(\n        <div>L'id renseigné ne retourne aucun enregistrement, veuillez vérifier votre saisie.</div>\n      );\n    };\n  }\n\n  /**\n   * admin render parts\n   */\n\n  adminTextMessage(){\n    return(\n      <div>\n        <h1>Tu es l'admin du système de vote, tu as acces à toutes les informations et interractions du SC !</h1>\n      </div>\n    );\n  }\n\n  adminDefineMaxVoters(){\n    if(this.state.MaxVoters<2 && this.state.workflowStatus==0){\n      return(\n        <div>\n          <p>\n          <form>\n            <label for=\"MaxVoters\">Définir le nombre de votant : </label>\n            <input type=\"text\" id=\"MaxVoters\" placeholder=\"Nb de votant\"/>&nbsp;\n            <input type=\"button\" onClick={this.runDefineMaxVoters}value=\"Ajouter\"/>\n          </form>\n          </p>\n        </div>\n      );\n    };\n  }\n\n  adminAddingVotants(){\n    if(this.state.nbVoters<=this.state.MaxVoters && this.state.workflowStatus==0){\n      return(\n        <div>\n          <div>Nombre max de votants : {this.state.events.map((addresse)=>(\n            <span>\n              {addresse.returnValues.MaxVoters}\n            </span>))}\n          </div>\n          <div>\n            <p>\n              <form>\n                <label for=\"address\">Ajouter un votant : </label>\n                <input type=\"text\" id=\"adressevotant\" required minLength=\"42\" placeholder=\"adresse 0x du votant\"/>&nbsp;\n                <input type=\"button\" onClick={this.runAddVoter}value=\"Ajouter\"/>\n              </form>\n            </p>\n          </div>\n        </div>\n      );\n    }else if(this.state.workflowStatus==0 && this.state.nbVoters==this.state.MaxVoters &&this.state.MaxVoters!=null) {\n      return(\n        <div>Nombre max de votant inscrits atteint, passez à l'étape suivante !</div>\n      );\n    }\n  }\n\n  adminNextStepSection(){\n    if (this.state.workflowStatus==0 && this.state.nbVoters>=2){\n      return(\n        <form>\n          <label for=\"nextStep\">Passer à l'étape suivante ? :&nbsp;</label>\n          <input type=\"button\" id=\"nextStep\" onClick={this.runNextStep} value=\"On y va !\"/><br />\n        </form>\n      );\n    }\n    if (this.state.workflowStatus==1 && this.state.nbProposals>=2){\n      return(\n        <form>\n          <label for=\"nextStep\">Passer à l'étape suivante ? :&nbsp;</label>\n          <input type=\"button\" id=\"nextStep\" onClick={this.runNextStep} value=\"On y va !\"/><br />\n        </form>\n      );\n    }\n    if (this.state.workflowStatus==2 && this.state.nbVotes>=2){\n      return(\n        <form>\n          <label for=\"nextStep\">Passer à l'étape suivante ? :&nbsp;</label>\n          <input type=\"button\" id=\"nextStep\" onClick={this.runNextStep} value=\"On y va !\"/><br />\n        </form>\n      );\n    }\n  }\n\n  adminDefineMaxProposals(){\n    if(this.state.MaxProposals<=2 && this.state.workflowStatus==1){\n      return(\n        <div>\n          <form>\n            <label for=\"MaxProposals\">Définir le nombre de propositions : </label>\n            <input type=\"text\" id=\"MaxProposals\" placeholder=\"Nb de propositions\"/>&nbsp;\n            <input type=\"button\" onClick={this.runDefineMaxProposals}value=\"Ajouter\"/>\n          </form>\n        </div>\n      );\n    };\n  }\n\n  /**\n   * common render parts\n   */\n  commonLodingWeb3(){\n    return(\n      <div>\n        <h1>Loading Web3, accounts, and contract...<br/></h1>\n        <h1>Please check that your metamask is loged !</h1>\n      </div>\n    );\n  }\n  commonStatus(){\n    return(\n      <div>\n        <h1>Bienvenue sur le système de vote !</h1>\n        <h2>Ton addresse metamask est :<Addresse addr={this.state.accounts}/></h2> {/*permet d'afficher l'adresse du compte utilisé*/}\n        <p>Nombre de votants enregistrés : {this.state.nbVoters} sur un maximum de {this.state.MaxVoters}.</p>\n        <p>Nombre de propositions enregistrées : {this.state.nbProposals} sur un maximum de {this.state.MaxProposals}.</p>\n        <p><em><strong>Statut actuel de la session de vote : {this.enumWorkflowStatus[this.state.workflowStatus]}</strong></em></p>\n      </div>\n    );\n  }\n  commonVoterList(){\n    if(this.state.nbVoters>0){\n      return(\n        <div>\n          <p>\n            <strong>Liste actuelle des votants :</strong>\n            <table>\n            {this.state.addresses.map((addresse)=>(\n              <tr><div>{addresse.returnValues.voterAddress}</div></tr>\n              ))}\n            </table>\n          </p>\n        </div>\n      );\n    }\n  }\n\n  commonMessageAboutWorkFlow(){\n    if (this.state.workflowStatus==0){\n      return(<div><p><strong>Session d'enregistrement des votants en cours, merci d'attendre la session \"{this.enumWorkflowStatus[(parseInt(this.state.workflowStatus))+1]}\" pour ajouter des proposition.</strong></p></div>);\n    }\n    if (this.state.workflowStatus==1&&this.state.MaxProposals!=0){\n      return(<div><p><strong>Vous pouvez désormais enregistrer des propositions.</strong></p></div>);\n    }\n    if(this.state.workflowStatus==1&&this.state.MaxProposals<2){\n      return(<div><p><strong>Attendez que l'admin définisse le nombre de propositions maximal.</strong></p></div>);\n    }\n    if (this.state.workflowStatus==2){\n      return(<div><p><strong>Session d'enregistrement des propositions terminée, veuillez attendre le début de la session \"{this.enumWorkflowStatus[(parseInt(this.state.workflowStatus))+1]}\" pour pouvoir voter.</strong></p></div>);\n    }\n    if (this.state.workflowStatus==3){\n      return(<div><p><strong>La session de vote à débuté, vous pouvez voter pour une seule proposition.</strong></p></div>);\n    }\n    if (this.state.workflowStatus==4){\n      return(<div><p><strong>La session de vote est terminée, veuillez attendre la session \"{this.enumWorkflowStatus[(parseInt(this.state.workflowStatus))+1]}\" pour l'affichage des résultats.</strong></p></div>);\n    }\n    if (this.state.workflowStatus==5){\n      return(<div><p><strong>Résultat du vote :</strong></p></div>);\n    }\n  }\n  render() {\n    if (!this.state.web3) {\n      return (\n        <div className=\"App\">\n          {this.commonLodingWeb3()}\n        </div>\n      );\n    }\n    if(this.state.owned){\n      return (\n        <div className=\"App\">\n          {this.adminTextMessage()}\n          {this.commonStatus()}\n          {this.adminAddingVotants()}\n          {this.adminDefineMaxVoters()}\n          {this.adminNextStepSection()}\n          {this.adminDefineMaxProposals()}\n          {this.commonVoterList()}\n\n        </div>\n      );\n    }else{\n      return(\n        <div className=\"App\">\n          {this.commonStatus()}\n          {this.commonVoterList()}\n          {this.commonMessageAboutWorkFlow()}\n\n\n\n\n        </div>\n      );\n    }\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}