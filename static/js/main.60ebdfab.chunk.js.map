{"version":3,"sources":["getWeb3.js","Addresse.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","on","location","reload","console","log","provider","providers","HttpProvider","Addresse","props","this","addr","React","Component","App","state","addresses","events","nbVoters","MaxVoters","nbProposals","MaxProposals","proposals","oneProposal","totalVotes","voter","winner","workflowStatus","owned","accounts","contract","enumWorkflowStatus","tempAddr","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","methods","getNbProposals","call","getNbVoters","owner","getWorkflowStatus","i","getOneProposal","from","push","options","fromBlock","toBlock","getPastEvents","listAddress","listEvents","setState","totalVotesCount","map","addresse","returnValues","MaxProposal","length","voterAddress","alert","error","runDefineMaxVoters","document","getElementById","value","defineMaxVoters","send","event","runAddVoter","utils","isAddress","isListed","Boolean","addVoter","getEvent","runDefineMaxProposals","defineMaxProposals","runAddProposal","Proposal","addProposal","runVoteForProposal","idProposal","getVoter","hasVoted","setVote","runNextStep","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotesDraw","getOneProposals","id","for","type","placeholder","onClick","required","minLength","sendWinnerCalculation","parseInt","className","adminTextMessage","commonStatus","adminAddingVotants","adminDefineMaxVoters","adminNextStepSection","adminDefineMaxProposals","commonVoterList","commonSetProposal","commonGetProposalList","commonShowProposals","commonMessageAboutWorkFlow","commonLodingWeb3","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60ebdfab.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          \n          window.ethereum.on('accountsChanged',function(){\n            window.location.reload();\n          });\n          window.ethereum.on('chainChanged',function(){\n            window.location.reload();\n          });\n          \n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react';\n\nexport default class Addresse extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n\n    render(){\n        return(\n            <div>{this.props.addr}</div>\n        )\n    }\n\n}","import React, { Component, useState, useEffect } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Addresse from \"./Addresse.js\";\n\nimport \"./App.css\";\n\n\nclass App extends Component {\n  state               = { addresses:null, events:null, nbVoters:null, MaxVoters:null, nbProposals:null, MaxProposals:null, proposals:null, oneProposal:null, totalVotes:0, voter:null, winner:null, workflowStatus:null, owned:null, web3:null, accounts:null, contract:null};\n  enumWorkflowStatus  = [\"Enregistrement des votants\",\"Enregistrement des propositions\",\"Fin de l'enregistrement des propositions\",\"Session de vote\",\"Fin de session de vote\",\"Session de résultats\"];\n  tempAddr            =[];\n  componentDidMount   = async () => {\n    try {\n      const web3            = await getWeb3();\n      const accounts        = await web3.eth.getAccounts();\n      const networkId       = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance        = new web3.eth.Contract(VotingContract.abi,deployedNetwork && deployedNetwork.address);\n\n      let nbProposals       = await instance.methods.getNbProposals().call();\n      let nbVoters          = await instance.methods.getNbVoters().call();\n      const owner           = await instance.methods.owner().call();\n      let workflowStatus    = await instance.methods.getWorkflowStatus().call();\n\n      /**\n       * Boucle permettant de récupérer la liste des propositions\n       */\n       let proposals=[];\n      for (let i=0;i<nbProposals;i++){\n        proposals.push(await instance.methods.getOneProposal(i).call({from:accounts[0]}));\n      }\n      let owned =accounts[0]==owner;\n\n      let options   = {\n        fromBlock:  0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n        toBlock:    'latest'\n      };\n      const listAddress = await instance.getPastEvents('VoterRegistered',options);\n\n      let listEvents  = await instance.getPastEvents('MaxVoters',options);\n      this.setState({addresses:listAddress, events:listEvents, nbProposals, proposals, nbVoters,workflowStatus, web3, accounts, owned, contract: instance });\n\n      let totalVotesCount = await instance.getPastEvents('Voted',options);\n\n      /**\n       * Récupération des emit directement depuis le smart contract pour réutilisation en front :\n       */\n      this.setState({totalVotes:totalVotesCount});\n      this.setState({MaxVoters:this.state.events.map((addresse)=>(addresse.returnValues.MaxVoters))});\n      listEvents  = await instance.getPastEvents('MaxProposals',options);\n      this.setState({events:listEvents});\n      this.setState({MaxProposals:listEvents.map((addresse)=>(addresse.returnValues.MaxProposal))});\n      this.setState({events:await instance.getPastEvents('WorkflowStatusChange',options)});\n      /**\n       * Récupération du nombre de vote et du gagnant avec condition de positionnement dans le workflow\n       */\n\n\n      /**\n       * En cours de déploiement\n       */\n      /*\n      if (this.state.workflowStatus>=4){\n        this.setState({totalVotes : await instance.methods.getTotalVotes().call()});\n      }*/\n\n\n      \n      /**\n       * Afin de réutiliser efficacement les addresses, un tableau dynamique est utilisé.\n       */\n\n      //console.log(listAddress[0].returnValues.voterAddress);\n      for (let i=0;i<listAddress.length;i++){\n        this.tempAddr.push(listAddress[0].returnValues.voterAddress);\n      }\n    } catch (error) {\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`,);\n      console.error(error);\n    }\n  };\n\n  runDefineMaxVoters = async ()=>{\n    const {accounts, contract}  =this.state;\n    const MaxVoters             =document.getElementById(\"MaxVoters\").value;\n\n    if(MaxVoters<2||MaxVoters>100||MaxVoters==null){\n      alert(`Please enter a value beetween 2 and 100.`);\n\n    }else{\n      await contract.methods.defineMaxVoters(MaxVoters).send({from:accounts[0]});\n\n      const listEvents=await contract.getPastEvents('MaxVoters');\n      this.setState({event:listEvents});\n    }\n    window.window.location.reload();\n  };\n\n  runAddVoter = async ()=>{\n      const {accounts, contract}=this.state;\n      let address=document.getElementById(\"adressevotant\").value;\n      if(this.state.web3.utils.isAddress(address)){\n        if(this.state.nbVoters<this.state.MaxVoters){\n          let isListed = new Boolean(false);\n          for (let i=0;i<=this.tempAddr.length;i++){\n            //console.log(this.tempAddr[i]);\n            if(address==this.tempAddr[i]){\n              isListed=true;\n            }\n          if (isListed==true){\n            alert(`Impossible : Adresse déjà inscrite !`);\n          }else{\n            await contract.methods.addVoter(address).send({from:accounts[0]});\n\n            let options   = {\n              fromBlock:  0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n              toBlock:    'latest'\n            };\n            const getEvent=await contract.getPastEvents('VoterRegistered',options);\n            this.setState({event:getEvent});\n            window.location.reload();\n            }\n          }\n        }else{\n          alert(`Nombre maximum de votant atteint !`);\n        }\n      }else{\n        alert(`Merci de renseigner une adresse valide`);\n      }\n  };\n\n  runDefineMaxProposals = async ()=>{\n\n    const {accounts, contract}=this.state;\n    const MaxProposals=document.getElementById(\"MaxProposals\").value;\n\n    if(MaxProposals<2||MaxProposals>100||MaxProposals ==null){\n      alert(`Please enter a value beetween 2 and 100.`);\n    }else{\n      await contract.methods.defineMaxProposals(MaxProposals).send({from:accounts[0]});\n\n      const listEvents=await contract.getPastEvents('MaxProposals');\n      this.setState({events:listEvents});\n    }\n    window.location.reload();\n  };\n\n  runAddProposal = async ()=>{\n\n    const {accounts, contract}=this.state;\n    let Proposal=document.getElementById(\"Proposal\").value;\n    await contract.methods.addProposal(Proposal).send({from:accounts[0]});\n\n    let options   = {\n      fromBlock:  0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n      toBlock:    'latest'\n    };\n\n    const getEvent = await contract.getPastEvents('ProposalRegistered',options);\n    this.setState({event:getEvent});\n    window.location.reload();\n};\n  runVoteForProposal= async ()=>{\n    const {accounts, contract}=this.state;\n    let idProposal=document.getElementById(\"idProposal\").value;\n\n    if (this.state.web3.utils.isAddress(accounts[0])){\n      this.setState({voter:await contract.methods.getVoter(accounts[0]).call({from:accounts[0]})});\n    }\n    if(this.state.voter.hasVoted==true){\n      alert(\"vous avez déjà voté !\");\n    }else{\n      await contract.methods.setVote(idProposal).send({from:accounts[0]});\n      alert(\"Vote enregistré!\");\n    }\n    window.location.reload();\n  }\n  /**\n   * this section is about all functions used to interact with the SC\n   */\n  runNextStep = async ()=>{\n    const {accounts, contract}=this.state;\n    if (this.state.workflowStatus==0){\n      await contract.methods.startProposalsRegistering().send({from:accounts[0]});\n    }\n    else if (this.state.workflowStatus==1){\n      await contract.methods.endProposalsRegistering().send({from:accounts[0]});\n    }\n    else if (this.state.workflowStatus==2){\n      await contract.methods.startVotingSession().send({from:accounts[0]});\n    }\n    else if (this.state.workflowStatus==3){\n      await contract.methods.endVotingSession().send({from:accounts[0]});\n    }\n    else if (this.state.workflowStatus==4){\n      await contract.methods.tallyVotesDraw().send({from:accounts[0]});\n    }\n    let workflowStatus = await contract.methods.getWorkflowStatus().call();\n    this.setState({workflowStatus});\n    window.location.reload();\n  }\n\n  /**\n   * Getters particuliers avec paramètres\n   */\n  getVoter = async (address) =>{\n    const {accounts, contract}=this.state;\n    if (this.state.web3.utils.isAddress(address)){\n      this.setState({voter:await contract.methods.getVoter(address).call({from:accounts[0]})});\n    }\n  }\n\n  getOneProposals = async (id) =>{\n    const {accounts, contract}=this.state;\n    if (id<=this.state.nbProposals&&id>=0){\n      this.setState({oneProposal:await contract.methods.getOneProposal(1).call({from:accounts[0]})});\n      return(\n        <div>{this.state.oneProposal}</div>\n      );\n    }else{\n      return(\n        <div>L'id renseigné ne retourne aucun enregistrement, veuillez vérifier votre saisie.</div>\n      );\n    };\n  }\n\n  /**\n   * Fonction non opérationnelles pour l'instant\n   */\n  /*\n  getTotalVotes(){\n    if(this.state.workflowStatus>3){\n      return(\n        <div>\n          <h3>Nombre total de votes comptabilisés : &nbsp;{this.state.totalVotes.length+1}</h3>\n        </div>\n      );\n    }\n  }\n  sendWinnerCalculation = async () =>{\n    const {accounts, contract}=this.state;\n      await contract.methods.tallyVotesDraw().send({from:accounts[0]});\n      window.location.reload();\n  }\n  getWinner(){\n    if(this.state.workflowStatus==5){\n      \n      return(\n        <div><h1>Le gagnant est : &nbsp;{this.state.winner}</h1></div>\n      );\n    }\n  }\n  */\n\n  /**\n   * admin render parts\n   */\n  adminTextMessage(){\n    return(\n      <div>\n        <h1>Tu es l'admin du système de vote, tu as acces à toutes les informations et interractions du SC !</h1>\n      </div>\n    );\n  }\n\n  adminDefineMaxVoters(){\n    if(this.state.MaxVoters<2 && this.state.workflowStatus==0){\n      return(\n        <div>\n          <p>\n          <form>\n            <label for=\"MaxVoters\">Définir le nombre de votant : </label>\n            <input type=\"text\" id=\"MaxVoters\" placeholder=\"Nb de votant\"/>&nbsp;\n            <input type=\"button\" onClick={this.runDefineMaxVoters}value=\"Ajouter\"/>\n          </form>\n          </p>\n        </div>\n      );\n    };\n  }\n\n  adminAddingVotants(){\n    if(this.state.nbVoters<=this.state.MaxVoters && this.state.workflowStatus==0){\n      return(\n        <div>\n          <div>Nombre max de votants : {this.state.events.map((addresse)=>(\n            <span>\n              {addresse.returnValues.MaxVoters}\n            </span>))}\n          </div>\n          <div>\n            <p>\n              <form>\n                <label for=\"address\">Ajouter un votant : </label>\n                <input type=\"text\" id=\"adressevotant\" required minLength=\"42\" placeholder=\"adresse 0x du votant\"/>&nbsp;\n                <input type=\"button\" onClick={this.runAddVoter}value=\"Ajouter\"/>\n              </form>\n            </p>\n          </div>\n        </div>\n      );\n    }else if(this.state.workflowStatus==0 && this.state.nbVoters==this.state.MaxVoters &&this.state.MaxVoters!=null) {\n      return(\n        <div>Nombre max de votant inscrits atteint, passez à l'étape suivante !</div>\n      );\n    }\n  }\n\n  adminNextStepSection(){\n    if (this.state.workflowStatus==0 && this.state.nbVoters>=2){\n      return(\n        <form>\n          <label for=\"nextStep\">Passer à l'étape d'ajout des propositions ? :&nbsp;</label>\n          <input type=\"button\" id=\"nextStep\" onClick={this.runNextStep} value=\"On y va !\"/><br />\n        </form>\n      );\n    }\n    if (this.state.workflowStatus==1 && this.state.nbProposals>=2){\n      return(\n        <form>\n          <label for=\"nextStep\">Mettre fin à l'étape de l'ajout des propositions ? :&nbsp;</label>\n          <input type=\"button\" id=\"nextStep\" onClick={this.runNextStep} value=\"On y va !\"/><br />\n        </form>\n      );\n    }\n    if ((this.state.workflowStatus==2)){\n      return(\n        <form>\n          <label for=\"nextStep\">Passer à l'étape de vote ? :&nbsp;</label>\n          <input type=\"button\" id=\"nextStep\" onClick={this.runNextStep} value=\"On y va !\"/><br />\n        </form>\n      );\n    }\n    if ((this.state.workflowStatus==3)){\n      return(\n        <form>\n          <label for=\"nextStep\">Mettre fin au vote ? :&nbsp;</label>\n          <input type=\"button\" id=\"nextStep\" onClick={this.runNextStep} value=\"On y va !\"/><br />\n        </form>\n      );\n    }\n    if ((this.state.workflowStatus==4)){\n      return(\n        <form>\n          <label for=\"nextStep\">Passer à l'étape des résultats ? :&nbsp;</label>\n          <input type=\"button\" id=\"nextStep\" onClick={this.runNextStep} value=\"On y va !\"/><br />\n        </form>\n      );\n    }\n  }\n\n  adminDefineMaxProposals(){\n    if(this.state.MaxProposals<2 && this.state.workflowStatus==1){\n      return(\n        <div>\n          <p>\n            <form>\n              <label for=\"MaxProposals\">Définir le nombre de propositions : </label>\n              <input type=\"text\" id=\"MaxProposals\" placeholder=\"Nb de propositions\"/>&nbsp;\n              <input type=\"button\" onClick={this.runDefineMaxProposals}value=\"Ajouter\"/>\n            </form>\n          </p>\n        </div>\n      );\n    };\n  }\n  adminAllowCalculatingWinner(){\n    if(this.state.workflowStatus==5){\n      return(\n        <div>\n          <p>\n          <form>\n              <label for=\"CalculateWinner\"><h2>Appuyez sur le bouton pour terminer :&nbsp;</h2></label>\n              <input type=\"button\" onClick={this.sendWinnerCalculation}value=\"Qui est le gagnant ?\"/>\n            </form>\n          </p>\n        </div>\n      );\n    }\n  }\n\n  /**\n   * common render parts\n   */\n  commonLodingWeb3(){\n    return(\n      <div>\n        <h1>Loading Web3, accounts, and contract...<br/></h1>\n        <h1>Please check that your metamask is loged !</h1>\n      </div>\n    );\n  }\n  commonStatus(){\n    return(\n      <div>\n        <h1>Bienvenue sur le système de vote !</h1>\n        <h2>Ton addresse metamask est :<Addresse addr={this.state.accounts}/></h2> {/*permet d'afficher l'adresse du compte utilisé*/}\n        <p>Nombre de votants enregistrés : {this.state.nbVoters} sur un maximum de {this.state.MaxVoters}.</p>\n        <p>Nombre de propositions enregistrées : {this.state.nbProposals} sur un maximum de {this.state.MaxProposals}.</p>\n        <p><em><strong>Statut actuel de la session de vote : {this.enumWorkflowStatus[this.state.workflowStatus]}</strong></em></p>\n      </div>\n    );\n  }\n  commonVoterList(){\n    if(this.state.nbVoters>0){\n      return(\n        <div>\n          <p>\n            <strong>Liste actuelle des votants :</strong>\n            <table>\n            {this.state.addresses.map((addresse)=>(\n              <tr><div>{addresse.returnValues.voterAddress}</div></tr>\n              ))}\n            </table>\n          </p>\n        </div>\n      );\n    }\n  }\n  commonGetProposalList(){\n    if(this.state.nbProposals>0){\n      return(\n        <div>\n        <p>\n          <strong>Liste actuelle des Propositions :</strong>\n          <table><tr><td><div>Proposition :</div></td><td><div>Nb de vote :</div></td></tr>\n          {this.state.proposals.map((proposals)=>(\n            <tr><td><div>{proposals[0]}</div></td><td><div>{proposals[1]}</div></td></tr>\n            ))}\n          </table>\n        </p>\n      </div>\n      );\n    }\n  }\n  commonMessageAboutWorkFlow(){\n    if (this.state.workflowStatus==0){\n      return(<div><p><strong>Session d'enregistrement des votants en cours, merci d'attendre la session \"{this.enumWorkflowStatus[(parseInt(this.state.workflowStatus))+1]}\" pour ajouter des proposition.</strong></p></div>);\n    }\n\n    if(this.state.workflowStatus==1&&this.state.MaxProposals<2){\n      return(<div><p><strong>Attendez que l'admin définisse le nombre de propositions maximal.</strong></p></div>);\n    }\n    if (this.state.workflowStatus==1&&this.state.MaxProposals!=0&&this.state.nbProposals<this.state.MaxProposals){\n      return(<div><p><strong>Vous pouvez désormais enregistrer des propositions.</strong></p></div>);\n    }\n    if (this.state.workflowStatus==1&&this.state.nbProposals==this.state.MaxProposals){\n      return(<div><p><strong>la liste des proposition est complete, attendez que l'admin lance la session \"{this.enumWorkflowStatus[(parseInt(this.state.workflowStatus))+2]}\" pour pouvoir voter.</strong></p></div>);\n    }\n    if (this.state.workflowStatus==2){\n      return(<div><p><strong>Session d'enregistrement des propositions terminée, veuillez attendre le début de la session \"{this.enumWorkflowStatus[(parseInt(this.state.workflowStatus))+1]}\" pour pouvoir voter.</strong></p></div>);\n    }\n    if (this.state.workflowStatus==3){\n      return(<div><p><strong>La session de vote à débuté, vous pouvez voter pour une seule proposition.</strong></p></div>);\n    }\n    if (this.state.workflowStatus==4){\n      return(<div><p><strong>La session de vote est terminée, veuillez attendre la session \"{this.enumWorkflowStatus[(parseInt(this.state.workflowStatus))+1]}\" pour l'affichage des résultats.</strong></p></div>);\n    }\n    if (this.state.workflowStatus==5){\n      return(<div><p><strong>Résultat du vote :</strong></p></div>);\n    }\n  }\n  commonSetProposal(){\n    if(this.state.workflowStatus==1&&this.state.MaxProposals!=0&&this.state.nbProposals<this.state.MaxProposals){\n      return(\n        <div>\n          <p>\n            <form>\n              <label for=\"Proposal\">Définir une proposition : </label>\n              <input type=\"text\" id=\"Proposal\" placeholder=\"Proposition?\"/>&nbsp;\n              <input type=\"button\" onClick={this.runAddProposal} value=\"Ajouter\"/>\n            </form>\n          </p>\n        </div>\n      );\n    }\n  }\n  commonShowProposals(){\n    let i=0;\n    if(this.state.workflowStatus==3){\n      return(\n        <div>\n          <table>\n            <tr>\n              <td>\n                <div>Voter pour:</div>\n              </td>\n            </tr>\n            {this.state.proposals.map((proposals)=>(\n              <tr>\n                <td>\n                  <div>\n                    <form>\n                      <label for=\"idProposal\">{proposals[0]} </label>\n                      <input type=\"button\" onClick={this.runVoteForProposal}value=\"Voter !\"/>\n                      <input type=\"hidden\" id=\"idProposal\" value={i++}/>\n                    </form>\n                  </div>\n                </td>\n              </tr>\n              )\n            )}\n          </table>\n      </div>\n      );\n    }\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return (\n        <div className=\"App\">\n          {this.commonLodingWeb3()}\n        </div>\n      );\n    }\n    if(this.state.owned){\n      return (\n        <div className=\"App\">\n          {this.adminTextMessage()}\n          {this.commonStatus()}\n          {this.adminAddingVotants()}\n          {this.adminDefineMaxVoters()}\n          {this.adminNextStepSection()}\n          {this.adminDefineMaxProposals()}\n          {this.commonVoterList()}\n          {this.commonSetProposal()}\n          {this.commonGetProposalList()}\n          {this.commonShowProposals()}\n          {/*this.getTotalVotes()*/}\n          {/*this.adminAllowCalculatingWinner()*/}\n          {/*this.getWinner()*/}\n        </div>\n      );\n    }else{\n      return(\n        <div className=\"App\">\n          {this.commonStatus()}\n          {this.commonVoterList()}\n          {this.commonMessageAboutWorkFlow()}\n          {this.commonSetProposal()}\n          {this.commonGetProposalList()}\n          {this.commonShowProposals()}\n          {/*this.getTotalVotes()*/}\n          {/*this.getWinner()*/}\n          </div>\n      );\n    }\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}